#ifndef LMP_PAIR_NNP_H
#define LMP_PAIR_NNP_H

#include "pair.h"
#ifdef LMPPLUGIN
#include "TorchMolNet.h"
#else
#include "torchmolnet/TorchMolNet.h"
#endif
#include <iostream>
#include <fstream>

#define GIT_SUMM @GIT_SUMM @
#define GIT_HASH @GIT_HASH @
#define GIT_BRANCH @GIT_BRANCH @
#define GIT_DATE @GIT_DATE @
#ifdef NOT_HIGH_PREC
#define FLOAT_PREC float
#else
#define FLOAT_PREC double
#endif
#define TORCHMOLNET_ROOT @CMAKE_INSTALL_PREFIX @
#define Torch_INCLUDE_DIRS @Torch_INCLUDE_DIRS @
#define TORCH_LIBRARIES @TORCH_LIBRARIES @
#define _CVT_STR(x) #x
#define _CVT_ASSTR(X) _CVT_STR(X)
#define STR_GIT_SUMM _CVT_ASSTR(GIT_SUMM)
#define STR_GIT_HASH _CVT_ASSTR(GIT_HASH)
#define STR_GIT_BRANCH _CVT_ASSTR(GIT_BRANCH)
#define STR_GIT_DATE _CVT_ASSTR(GIT_DATE)
#define STR_FLOAT_PREC _CVT_ASSTR(FLOAT_PREC)
#define STR_TORCHMOLNET_ROOT _CVT_ASSTR(TORCHMOLNET_ROOT)
#define STR_Torch_INCLUDE_DIRS _CVT_ASSTR(Torch_INCLUDE_DIRS)
#define STR_Torch_LIBRARY _CVT_ASSTR(TORCH_LIBRARIES)

namespace LAMMPS_NS
{

  class PairTorchMolNet : public Pair
  {
  public:
    PairTorchMolNet(class LAMMPS *);
    virtual ~PairTorchMolNet();
    void compute(int, int) override;

    void settings(int, char **) override;
    void coeff(int, char **) override;
    double init_one(int, int) override;
    void write_restart(FILE *) override;
    void read_restart(FILE *) override;
    void write_restart_settings(FILE *) override;
    void read_restart_settings(FILE *) override;
    void write_data(FILE *) override;
    void write_data_all(FILE *) override;
    double single(int, int, int, int, double, double, double, double &) override;
    void *extract(const char *, int &) override;
    void print_summary(const std::string pre=">>>") const

  private:
    torchmolnet::TorchMolNet torchmolnet;

  protected:

    virtual void allocate();
  }

}

#endif