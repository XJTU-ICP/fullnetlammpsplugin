#ifndef LMP_PAIR_NNP_H
#define LMP_PAIR_NNP_H

#include "pair.h"
#ifdef LMPPLUGIN
#include "TorchMolNet.h"
#else
#include "torchmolnet/TorchMolNet.h"
#endif
#include <iostream>
#include <fstream>

#define GIT_SUMM @GIT_SUMM @
#define GIT_HASH @GIT_HASH @
#define GIT_BRANCH @GIT_BRANCH @
#define GIT_DATE @GIT_DATE @
#ifdef NOT_HIGH_PREC
#define FLOAT_PREC float
#else
#define FLOAT_PREC double
#endif
#define TORCHMOLNET_ROOT @CMAKE_INSTALL_PREFIX @
#define Torch_INCLUDE_DIRS @Torch_INCLUDE_DIRS @
#define TORCH_LIBRARIES @TORCH_LIBRARIES @
#define _CVT_STR(x) #x
#define _CVT_ASSTR(X) _CVT_STR(X)
#define STR_GIT_SUMM _CVT_ASSTR(GIT_SUMM)
#define STR_GIT_HASH _CVT_ASSTR(GIT_HASH)
#define STR_GIT_BRANCH _CVT_ASSTR(GIT_BRANCH)
#define STR_GIT_DATE _CVT_ASSTR(GIT_DATE)
#define STR_FLOAT_PREC _CVT_ASSTR(FLOAT_PREC)
#define STR_TORCHMOLNET_ROOT _CVT_ASSTR(TORCHMOLNET_ROOT)
#define STR_Torch_INCLUDE_DIRS _CVT_ASSTR(Torch_INCLUDE_DIRS)
#define STR_Torch_LIBRARY _CVT_ASSTR(TORCH_LIBRARIES)

namespace LAMMPS_NS
{

  class PairTorchMolNet : public Pair
  {
  public:
    PairTorchMolNet(class LAMMPS *);
    virtual ~PairTorchMolNet();
    virtual void compute(int, int);
    virtual void *extract(const char *, int &);
    void settings(int, char **);
    virtual void coeff(int, char **);
    void init_style();
    virtual void write_restart(FILE *);
    virtual void read_restart(FILE *);
    double init_one(int i, int j);
    int pack_reverse_comm(int, int, double *);
    void unpack_reverse_comm(int, int *, double *);
    void print_summary(const std::string pre) const;
    int get_node_rank();
    std::string get_file_content(const std::string &model);
    std::vector<std::string> get_file_content(const std::vector<std::string> &models);

  protected:
    virtual void allocate();
    double **scale;

  private:
    torchmolnet::TorchMolNet torchmolnet;
    // deepmd::DeepPotModelDevi deep_pot_model_devi;
    unsigned numb_models;
    double cutoff;
    int numb_types;
    std::vector<std::vector<double>> all_force;
    std::ofstream fp;
    int out_freq;
    std::string out_file;
    int dim_fparam;
    int dim_aparam;
    int out_each;
    int out_rel;
    int out_rel_v;
    bool single_model;
    bool multi_models_mod_devi;
    bool multi_models_no_mod_devi;
    bool is_restart;
#ifdef HIGH_PREC
    std::vector<double> fparam;
    std::vector<double> aparam;
    double eps;
    double eps_v;
#else
    std::vector<float> fparam;
    std::vector<float> aparam;
    float eps;
    float eps_v;
#endif
    void make_ttm_aparam(
#ifdef HIGH_PREC
        std::vector<double> &dparam
#else
        std::vector<float> &dparam
#endif
    );
    bool do_ttm;
    std::string ttm_fix_id;
    int *counts, *displacements;
    tagint *tagsend, *tagrecv;
    double *stdfsend, *stdfrecv;
  };

}

#endif